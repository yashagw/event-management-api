// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yashagw/event-management-api/db (interfaces: Provider)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/yashagw/event-management-api/db/model"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProvider)(nil).Close))
}

// CreateRequestToBecomeHost mocks base method.
func (m *MockProvider) CreateRequestToBecomeHost(arg0 context.Context, arg1 int64) (*model.UserHostRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequestToBecomeHost", arg0, arg1)
	ret0, _ := ret[0].(*model.UserHostRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequestToBecomeHost indicates an expected call of CreateRequestToBecomeHost.
func (mr *MockProviderMockRecorder) CreateRequestToBecomeHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequestToBecomeHost", reflect.TypeOf((*MockProvider)(nil).CreateRequestToBecomeHost), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockProvider) CreateUser(arg0 context.Context, arg1 model.CreateUserParams) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockProviderMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockProvider)(nil).CreateUser), arg0, arg1)
}

// DB mocks base method.
func (m *MockProvider) DB() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockProviderMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockProvider)(nil).DB))
}

// DeleteRequestToBecomeHost mocks base method.
func (m *MockProvider) DeleteRequestToBecomeHost(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRequestToBecomeHost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRequestToBecomeHost indicates an expected call of DeleteRequestToBecomeHost.
func (mr *MockProviderMockRecorder) DeleteRequestToBecomeHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRequestToBecomeHost", reflect.TypeOf((*MockProvider)(nil).DeleteRequestToBecomeHost), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockProvider) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockProviderMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockProvider)(nil).DeleteUser), arg0, arg1)
}

// GetRequestToBecomeHost mocks base method.
func (m *MockProvider) GetRequestToBecomeHost(arg0 context.Context, arg1 int64) (*model.UserHostRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestToBecomeHost", arg0, arg1)
	ret0, _ := ret[0].(*model.UserHostRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestToBecomeHost indicates an expected call of GetRequestToBecomeHost.
func (mr *MockProviderMockRecorder) GetRequestToBecomeHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestToBecomeHost", reflect.TypeOf((*MockProvider)(nil).GetRequestToBecomeHost), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockProvider) GetUserByEmail(arg0 context.Context, arg1 string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockProviderMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockProvider)(nil).GetUserByEmail), arg0, arg1)
}

// ListPendingRequests mocks base method.
func (m *MockProvider) ListPendingRequests(arg0 context.Context, arg1 model.ListPendingRequestsParams) (*model.ListPendingRequestsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingRequests", arg0, arg1)
	ret0, _ := ret[0].(*model.ListPendingRequestsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingRequests indicates an expected call of ListPendingRequests.
func (mr *MockProviderMockRecorder) ListPendingRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingRequests", reflect.TypeOf((*MockProvider)(nil).ListPendingRequests), arg0, arg1)
}

// Tx mocks base method.
func (m *MockProvider) Tx() *sql.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx")
	ret0, _ := ret[0].(*sql.Tx)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockProviderMockRecorder) Tx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockProvider)(nil).Tx))
}
